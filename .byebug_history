exit
current_user
exit
current_user
exit
current_user
exit
current_user
exit
current_user
exit
current_user
exit
current_user
q
exit
JWT.decode(request.headers["Authorization"].split(" ").last, Rails.application.secrets.secret_key_base, 'HS256').first["user_id"]
JWT.decode(request.headers["Authorization"].split(" ").last, Rails.application.secrets.secret_key_base, 'HS256').first
JWT.decode(request.headers["Authorization"].split(" ").last, Rails.application.secrets.secret_key_base, 'HS256').first.user_id
JWT.decode(request.headers["Authorization"].split(" ").last, Rails.application.secrets.secret_key_base, 'HS256').first.usser_id
JWT.decode(request.headers["Authorization"].split(" ").last, Rails.application.secrets.secret_key_base, 'HS256')
Rails.application.secrets.secret_key_base
request.headers["Authorization"].split(" ").last
request.headers["Authorization"].split(" ").first
request.headers["Authorization"]
request.headers["Authorization"].slice(" ")
request.headers["Authorization"]
request.headers["Content-Type"]
headers["Authorization"]
headers["Content-Type"]
end
ActionDispatch::Http::Headers.from_hash(env)
headers
request.headers
request
exit
devise_parameter_sanitizer.permit(:user, keys: [:username])
devise_parameter_sanitizer.permit(:user, keys: :username)
devise_parameter_sanitizer.permit(:user)
devise_parameter_sanitizer.user
devise_parameter_sanitizer
exit
devise_parameter_sanitizer
exit
@user.save!
@user = User.new(user_params)
params
exit
params
exit
params
exit
params
parameter
params
user_params
exit
params
user_params
exit
user_params
params
parasm
parameters
user_params
exit
user_params
exit
user_params
exit
user_params
exit
